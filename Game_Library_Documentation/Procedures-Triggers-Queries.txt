DELIMITER //
CREATE PROCEDURE addgame(
  IN game_id int,
  IN gname VARCHAR(20),
  IN publisher VARCHAR(20),
  IN price VARCHAR(20),
  IN descript VARCHAR(2000),
  IN review VARCHAR(20)
)
BEGIN
  -- Insert into login table
  INSERT INTO games (game_id, gname, publisher, price, descript, review)
  VALUES (game_id, gname, publisher, price, descript, review);
END //
CALL addgame(14, 'Jedi Fallen Order', 'EA Studios', 50, 'The prequel to jedi survivor', 0)
//

==============================================================

genre specific search/sort
DELIMITER //
CREATE PROCEDURE `get_games_from`(in genre_name varchar(50))
BEGIN
    SELECT gname, genre
    FROM Games
    WHERE game_id IN (
        SELECT game_id
        FROM GameCategory
        WHERE genre = genre_name
    );
END //
DELIMITER ;

==============================================================

update user funds
DELIMITER //

CREATE PROCEDURE UpdateFunds(IN userID INT, IN newFunds INT)
BEGIN
    UPDATE Consumer
    SET funds = newFunds
    WHERE user_id = userID;
END //

DELIMITER ;

==============================================================

count of games in specific category
DELIMITER //

CREATE PROCEDURE GetGameCountInCategory(IN categoryName VARCHAR(50), OUT gameCount INT)
BEGIN
    SELECT COUNT(*) INTO gameCount
    FROM Games
    WHERE game_id IN (
        SELECT game_id
        FROM GameCategory
        WHERE genre = categoryName
    );
END //

DELIMITER ;

==============================================================

procedure to delete game and all records
DELIMITER //

CREATE PROCEDURE DeleteGame(IN gameID INT)
BEGIN
    -- Delete from GameCategory table
    DELETE FROM GameCategory WHERE game_id = gameID;

    -- Delete from hasRated table
    DELETE FROM hasRated WHERE game_id = gameID;

    -- Delete from inLibrary table
    DELETE FROM inLibrary WHERE game_id = gameID;

    -- Delete from inWishlist table
    DELETE FROM inWishlist WHERE game_id = gameID;

    -- Delete from GSupervises table
    DELETE FROM GSupervises WHERE game_id = gameID;

    -- Delete from Achievements table
    DELETE FROM Achievements WHERE game_id = gameID;

    -- Delete from Games table
    DELETE FROM Games WHERE game_id = gameID;
END//

DELIMITER ;

==============================================================

Trigger that handles. new review, deleted review, updated review
DELIMITER //

CREATE TRIGGER UpdateGameReview
AFTER INSERT ON hasRated
FOR EACH ROW
BEGIN
    -- Calculate and update the average review score for the game
    UPDATE Games
    SET review = (SELECT AVG(rate) FROM hasRated WHERE game_id = NEW.game_id)
    WHERE game_id = NEW.game_id;
END;

CREATE TRIGGER UpdateGameReview_Update
AFTER UPDATE ON hasRated
FOR EACH ROW
BEGIN
    -- Calculate and update the average review score for the game
    UPDATE Games
    SET review = (SELECT AVG(rate) FROM hasRated WHERE game_id = NEW.game_id)
    WHERE game_id = NEW.game_id;
END;

CREATE TRIGGER UpdateGameReview_Delete
AFTER DELETE ON hasRated
FOR EACH ROW
BEGIN
    -- Calculate and update the average review score for the game
    UPDATE Games
    SET review = (SELECT AVG(rate) FROM hasRated WHERE game_id = OLD.game_id)
    WHERE game_id = OLD.game_id;
END;

DELIMITER ;

==============================================================

add friend
DELIMITER //

CREATE PROCEDURE AddFriend(IN user1ID INT, IN user2ID INT)
BEGIN
    INSERT INTO isFriend (user_id1, user_id2)
    VALUES (user1ID, user2ID);
    
    INSERT INTO isFriend (user_id1, user_id2)
    VALUES (user2ID, user1ID);
END //

DELIMITER ;

==============================================================

show no reviews and set reviews to zero
DELIMITER //

CREATE PROCEDURE SetGameReviewsToZero()
BEGIN
    -- Find games with no reviews
    SELECT game_id
    FROM Games
    WHERE game_id NOT IN (
        SELECT DISTINCT game_id
        FROM hasRated
    )
    INTO @gameIds;

    -- Loop through each game and set its review score to 0
    WHILE @gameIds IS NOT NULL DO
        SET @gameId = SUBSTRING_INDEX(@gameIds, ',', 1);
        UPDATE Games
        SET review = 0
        WHERE game_id = @gameId;
        SET @gameIds = SUBSTRING(@gameIds, LENGTH(@gameId) + 2);
    END WHILE;
END //

DELIMITER ;

==============================================================

trigger to update playcount in a game inlibrary whenever a playlog is found
DELIMITER //

CREATE TRIGGER UpdateTimesPlayed AFTER INSERT ON playlog
FOR EACH ROW
BEGIN
    UPDATE inLibrary
    SET timesplayed = NEW.counter
    WHERE game_id = NEW.game_id;
END //

DELIMITER ;

==============================================================

trigger to update totaltimesplayed
DELIMITER //

CREATE TRIGGER UpdateTotalTimesPlayed
AFTER INSERT ON PlayLog
FOR EACH ROW
BEGIN
    -- Update timesplayed in inLibrary table
    UPDATE inLibrary
    SET timesplayed = NEW.counter
    WHERE game_id = NEW.game_id AND user_id = NEW.user_id;

    -- Update totaltimesplayed in Consumer table
    UPDATE Consumer c
    SET c.totaltimesplayed = (
        SELECT SUM(timesplayed)
        FROM inLibrary
        WHERE user_id = c.user_id
    )
    WHERE c.user_id = NEW.user_id;
END //

DELIMITER ;

================================================================

remove from wish add to lib

DELIMITER //

CREATE PROCEDURE AddToLibraryFromWishlist(
    IN p_user_id INTEGER,
    IN p_game_id INTEGER
)
BEGIN
    -- Check if the game exists in the user's wishlist
    IF EXISTS (
        SELECT 1
        FROM inWishlist
        WHERE user_id = p_user_id AND game_id = p_game_id
    ) THEN
        -- Remove the game from the wishlist
        DELETE FROM inWishlist
        WHERE user_id = p_user_id AND game_id = p_game_id;
        
        -- Add the game to the library
        INSERT INTO inLibrary (user_id, game_id, timesplayed)
        VALUES (p_user_id, p_game_id, 0);
        
        SELECT 'Game added to the library.';
    END IF;
END //

DELIMITER ;

===============================================================

add game to library

DELIMITER //

CREATE PROCEDURE AddGameToLibrary(IN userID INT, IN gameID INT)
BEGIN
    INSERT INTO inLibrary (user_id, game_id, timesplayed)
    VALUES (userID, gameID, 0);
END //

DELIMITER ;

================================================================

add to wishlist



DELIMITER //

CREATE PROCEDURE AddGameToWish(IN userID INT, IN gameID INT)
BEGIN
    INSERT INTO inWishlist (user_id, game_id)
    VALUES (userID, gameID);
END //

DELIMITER ;

=============================================================
